image: node #globally download our docker image so that we dont need to download it everytime

#below are the order of the stages in our pipeline
#some stages run 1 by 1 some run at the same time
stages:
  - build
  - test
  - deploy staging
  - test staging deployment
  - deploy production
  - test production deployment

variables:
  STAGING_DOMAIN: medical-tin-staging.surge.sh
  PRODUCTION_DOMAIN: medical-tin-prodction.surge.sh

#Global cache configuration
cache:
  key: ${CI_COMMIT_REF_SLUG} #this is a predefined variable to point at your current branch
  paths:
    - node_modules/

build website:
  stage: build
  script:
    - echo $CI_COMMIT_SHORT_SHA
    - npm install
    - npm install -g gatsby-cli
    - gatsby build
    - sed -i "s/%%VERSION%%/$CI_COMMIT_SHORT_SHA/" ./public/index.html
  artifacts:
    paths:
      - ./public

test artifact:
  stage: test
  image: alpine
  script:
    - test -f ./public/index.html
    - grep -q "gatsby" ./public/index.html

test website:
  stage: test
  script:
    - npm install
    - npm install -g gatsby-cli
    - gatsby serve & #start the server using the production build port 9000
    - sleep 3 #add a command so that the server has some time to spin up before next command
    - curl "http://localhost:9000" | tac | tac | grep -q "Gatsby" #download the contents of this website from the input and pass it into the grep
    #what tac is doing is making the grep wait until all the output is written from the curl

deploy staging:
  stage: deploy staging
  environment:
    name: staging
    url: "http://$STAGING_DOMAIN"
  script:
    - echo "deploy staging"
    - npm install --global surge
    - surge --project ./public --domain $STAGING_DOMAIN
    
test staging deployment:
  stage: test staging deployment
  image: alpine
  cache: {}
  script:
    - echo "test staging deployment"
    - apk add --no-cache curl
    - curl "$STAGING_DOMAIN" | tac | tac | grep "Gatsby"

deploy production:
  stage: deploy production
  environment:
    name: production
    url: "http://$PRODUCTION_DOMAIN"
  when: manual #added a manual step so deploy to production is not automatic
  script:
    - npm install --global surge
    - surge --project ./public --domain $PRODUCTION_DOMAIN

test production deployment:
  stage: test production deployment
  needs:
    - deploy production #test production deployment has a dependency with deploy production
  image: alpine
  cache: {}
  script:
    - apk add --no-cache curl
    - curl "$PRODUCTION_DOMAIN" | tac | tac | grep "Gatsby"
    - curl "$PRODUCTION_DOMAIN" | tac | tac | grep "$CI_COMMIT_SHORT_SHA"


