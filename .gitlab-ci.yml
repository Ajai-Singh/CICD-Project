image: node

#below are the order of the stages in our pipeline
#some stages run 1 by 1 some run at the same time
stages:
  - build
  - test
  - deploy
  - test deployment

build website:
  stage: build
  script:
    - npm install
    - npm install -g gatsby-cli
    - gatsby build
  artifacts:
    paths:
      - ./public

test artifact:
  stage: test
  image: alpine
  script:
    - test -f ./public/index.html
    - grep -q "gatsby" ./public/index.html

test website:
  stage: test
  script:
    - npm install
    - npm install -g gatsby-cli
    - gatsby serve & #start the server using the production build port 9000
    - sleep 3 #add a command so that the server has some time to spin up before next command
    - curl "http://localhost:9000" | tac | tac | grep -q "Gatsby" #download the contents of this website from the input and pass it into the grep
    #what tac is doing is making the grep wait until all the output is written from the curl

deploy website to cloud:
  stage: deploy
  script:
    - npm install --global surge
    - surge --project ./public --domain medical-tin.surge.sh

test website deployment:
  stage: test deployment
  image: alpine
  script:
    # - npm install --global surge
    # - surge --project ./public --domain medical-tin.surge.sh
    - apk add --no-cache curl
    - curl "medical-tin.surge.sh" | tac | tac | grep "Gatsby"


